((Basics
  (((nandb 1 #f) (test_nandb1 test_nandb2 test_nandb3 test_nandb4))
   ((andb3 1 #f) (test_andb31 test_andb32 test_andb33 test_andb34))
   ((factorial 1 #f) (test_factorial1 test_factorial2))
   ((blt_nat 2 #f) (test_blt_nat1 test_blt_nat2 test_blt_nat3))
   ((simpl_plus 1 optional) ())
   ((plus_id_exercise 1 #f) (plus_id_exercise))
   ((mult_1_plus 2 recommended) (mult_1_plus plus_1_neq_0_firsttry))
   ((zero_nbeq_plus_1 1 #f) (zero_nbeq_plus_1))
   ((andb_true_elim2 2 #f) (andb_true_elim2 plus_0_r_firsttry plus_0_r_secondtry))
   ((basic_induction 2 recommended) (mult_0_r plus_n_Sm plus_comm))
   ((double_plus 2 #f) ())
   ((destruct_induction 1 #f) ())
   ((plus_comm_informal 2 #f) ())
   ((beq_nat_refl_informal 2 optional) ())
   ((beq_nat_refl 1 optional) (beq_nat_refl plus_rearrange_firsttry))
   ((mult_comm 4 recommended) (plus_swap mult_comm))
   ((evenb_n__oddb_Sn 2 optional) (evenb_n__oddb_Sn))
   ((more_exercises 3 optional)
    (ble_nat_refl
     zero_nbeq_S
     andb_false_r
     plus_ble_compat_l
     S_nbeq_0
     mult_1_l
     all3_spec
     mult_plus_distr_r
     mult_assoc))
   ((|plus_swap'| 2 optional) (|plus_swap'|))
   ((#f 3 optional) ())
   ((binary 4 recommended) ())
   ((binary_inverse 5 #f) ())
   ((decreasing 2 optional) ())))
 (Lists
  (((snd_fst_is_swap 1 #f) (snd_fst_is_swap))
   ((fst_swap_is_snd 1 optional) (fst_swap_is_snd))
   ((list_funs 2 recommended)
    (test_nonzeros test_oddmembers test_countoddmembers1 test_countoddmembers2 test_countoddmembers3))
   ((alternate 3 recommended) (test_alternate1 test_alternate2 test_alternate3 test_alternate4))
   ((bag_functions 3 recommended)
    (test_count1 test_count2 sum test_sum1 test_add1 test_add2 test_member1 test_member2))
   ((bag_more_functions 3 optional)
    (test_remove_one1
     test_remove_one2
     test_remove_one3
     test_remove_one4
     test_remove_all1
     test_remove_all2
     test_remove_all3
     test_remove_all4
     test_subset1
     test_subset2))
   ((bag_theorem 3 recommended) (rev_length_firsttry))
   ((list_exercises 3 recommended) (app_nil_end rev_involutive app_ass4 snoc_append distr_rev))
   ((list_design 2 recommended) ())
   ((bag_proofs 2 optional) (count_member_nonzero remove_decreases_count))
   ((bag_count_sum 3 optional) ())
   ((rev_injective 4 optional) ())
   ((hd_opt 2 #f) (test_hd_opt1 test_hd_opt2 test_hd_opt3))
   ((option_elim_hd 1 optional) (option_elim_hd))
   ((beq_natlist 2 recommended) (test_beq_natlist1 test_beq_natlist2 test_beq_natlist3 beq_natlist_refl))
   ((Dictionaries #f extended) ())
   ((dictionary_invariant1 1 #f) (dictionary_invariant1))
   ((dictionary_invariant2 1 #f) (dictionary_invariant2))))
 (Poly
  (((poly_exercises 2 optional) (test_repeat1 nil_app rev_snoc rev_involutive snoc_with_append))
   ((combine_checks 1 optional) ())
   ((split 2 recommended) ())
   ((hd_opt_poly 1 optional) (test_hd_opt1 test_hd_opt2))
   ((currying 2 optional) (uncurry_curry curry_uncurry))
   ((filter_even_gt7 2 #f) (test_filter_even_gt7_1 test_filter_even_gt7_2))
   ((partition 3 #f) (test_partition1 test_partition2))
   ((map_rev 3 optional) (map_rev))
   ((flat_map 2 recommended) (test_flat_map1))
   ((implicit_args 2 optional) ())
   ((fold_types_different 1 optional) ())
   ((override_example 1 #f) (override_example))
   ((silly_ex 2 optional) (silly_ex silly3_firsttry))
   ((apply_exercise1 3 recommended) (rev_exercise1))
   ((apply_rewrite 1 #f) (unfold_example_bad))
   ((override_neq 2 #f) (override_neq))
   ((sillyex1 1 #f) (sillyex1))
   ((sillyex2 1 #f) (sillyex2 beq_nat_eq_FAILED))
   ((beq_nat_eq_informal 2 #f) ())
   ((|beq_nat_eq'| 3 #f) (|beq_nat_eq'|))
   ((practice 2 optional) (beq_nat_0_l beq_nat_0_r))
   ((apply_exercise2 3 #f) (beq_nat_sym))
   ((beq_nat_sym_informal 3 #f) ())
   ((plus_n_n_injective 3 recommended) (plus_n_n_injective))
   ((override_shadow 1 #f) (override_shadow))
   ((combine_split 3 recommended) (combine_split))
   ((split_combine 3 optional) (sillyfun1_odd_FAILED))
   ((override_same 2 #f) (override_same))
   ((filter_exercise 3 optional) (filter_exercise))
   ((apply_exercises 3 recommended) (trans_eq_exercise beq_nat_trans override_permute))
   ((fold_length 2 optional) (fold_length_correct))
   ((fold_map 3 recommended) ())
   ((mumble_grumble 2 optional) ())
   ((baz_num_elts 2 optional) ())
   ((forall_exists_challenge 4 recommended) ())
   ((index_informal 2 optional) ())))
 (Gen
  (((gen_dep_practice 3 recommended) (plus_n_n_injective_take2 index_after_last))
   ((index_after_last_informal 3 optional) ())
   ((gen_dep_practice_opt 3 #f) (|length_snoc'''|))
   ((app_length_cons 3 #f) (app_length_cons))
   ((app_length_twice 4 optional) (app_length_twice))))
 (Prop
  (((varieties_of_beauty 1 #f) ())
   ((six_is_beautiful 1 #f) (six_is_beautiful |six_is_beautiful'|))
   ((nine_is_beautiful 1 #f) (nine_is_beautiful |nine_is_beautiful'|))
   ((b_times2 2 #f) (b_times2))
   ((|b_times2'| 3 optional) (|b_times2'|))
   ((b_timesm 2 #f) (b_timesm))
   ((gorgeous_tree 1 #f) (gorgeous__beautiful_FAILED))
   ((gorgeous_plus13 1 #f) (gorgeous_plus13))
   ((gorgeous_plus13_po 2 #f) (gorgeous_plus13_po))
   ((gorgeous_sum 2 #f) (gorgeous_sum))
   ((beautiful__gorgeous 3 #f) (beautiful__gorgeous))
   ((b_times2 3 optional) (g_times2))
   ((double_even 1 #f) (double_even))
   ((double_even_pfobj 4 optional) ())
   ((ev_minus2_n 1 optional) ())
   ((ev__even 1 recommended) ())
   ((l_fails 1 #f) ())
   ((ev_sum 2 #f) (ev_sum SSev_ev_firsttry))
   ((inversion_practice 1 #f) (SSSSev__even even5_nonsense))
   ((ev_ev__ev 3 recommended) (ev_ev__ev))
   ((ev_plus_plus 3 optional) (ev_plus_plus))
   ((|plus_one_r'| 2 optional) (|plus_one_r'|))
   ((rgb 1 #f) ())
   ((natlist1 1 #f) ())
   ((ex_set 1 #f) ())
   ((tree 1 #f) ())
   ((mytype 1 #f) ())
   ((foo 1 optional) ())
   ((|foo'| 1 optional) ())
   ((p_provability 3 optional) ())
   ((plus_explicit_prop 1 optional) ())
   ((true_upto_n__true_everywhere 4 optional)
    (true_upto_n_example b_16_atmpt_4 b_16_atmpt_5 b_16_atmpt_6 b_16))
   ((palindromes 4 recommended) ())
   ((palindrome_converse 5 optional) ())
   ((subsequence 4 #f) ())
   ((foo_ind_principle 2 optional) ())
   ((bar_ind_principle 2 optional) ())
   ((no_longer_than_ind 2 optional) ())
   ((R_provability 2 optional) ())))
 (Logic
  (((proj2 1 optional) (proj2))
   ((and_assoc 2 #f) (and_assoc))
   ((even__ev 2 recommended) (even__ev))
   ((conj_fact 2 optional) (conj_fact))
   ((iff_properties 1 optional) (iff_refl iff_trans))
   ((beautiful_iff_gorgeous 2 optional) (beautiful_iff_gorgeous))
   ((|or_commut''| 2 optional) ())
   ((or_distributes_over_and_2 2 recommended) (or_distributes_over_and_2))
   ((or_distributes_over_and 1 optional) (or_distributes_over_and))
   ((bool_prop 2 #f) (andb_false orb_true orb_false))
   ((False_ind_principle 1 #f) ())
   ((True_induction 2 optional) ())
   ((double_neg_inf 2 recommended) ())
   ((contrapositive 2 recommended) (contrapositive))
   ((not_both_true_and_false 1 #f) (not_both_true_and_false))
   ((informal_not_PNP 1 #f) ())
   ((ev_not_ev_S 1 #f) (ev_not_ev_S classic_double_neg))
   ((classical_axioms 5 optional) ())
   ((not_eq_beq_false 2 recommended) (not_eq_beq_false))
   ((beq_false_not_eq 2 optional) (beq_false_not_eq))
   ((english_exists 1 optional) (p))
   ((dist_not_exists 1 #f) (dist_not_exists))
   ((not_exists_dist 3 optional) (not_exists_dist))
   ((dist_exists_or 2 #f) (dist_exists_or))
   ((two_defs_of_eq_coincide 3 optional) (two_defs_of_eq_coincide))
   ((total_relation 2 recommended) ())
   ((empty_relation 2 #f) ())
   ((R_provability 3 recommended) ())
   ((R_fact 3 optional) ())
   ((all_forallb 3 recommended) ())
   ((filter_challenge 4 optional) ())
   ((filter_challenge_2 5 optional) ())
   ((no_repeats 4 optional) ())
   ((le_exercises 2 optional)
    (O_le_n
     n_le_m__Sn_le_Sm
     Sn_le_Sm__n_le_m
     le_plus_l
     plus_lt
     lt_S
     ble_nat_true
     ble_nat_n_Sn_false
     ble_nat_false))
   ((nostutter 3 recommended) (test_nostutter_1 test_nostutter_2 test_nostutter_3 test_nostutter_4))
   ((|pigeonhole principle| 4 optional) (pigeonhole_principle))
   ((and_ind_principle 1 optional) ())
   ((or_ind_principle 1 optional) ())))
 (Imp
  (((optimize_0plus_b 3 #f) ())
   ((optimizer 4 optional) ())
   ((bevalR 3 #f) ())
   ((beq_id_eq 1 optional) (beq_id_eq))
   ((beq_id_false_not_eq 1 optional) (beq_id_false_not_eq))
   ((not_eq_beq_id_false 1 optional) (not_eq_beq_id_false))
   ((beq_id_sym 1 optional) (beq_id_sym))
   ((update_eq 1 #f) (update_eq))
   ((update_neq 1 #f) (update_neq))
   ((update_example 1 #f) (update_example))
   ((update_shadow 1 recommended) (update_shadow))
   ((update_same 2 #f) (update_same))
   ((update_permute 3 #f) (update_permute))
   ((ceval_example2 2 #f) (ceval_example2))
   ((pup_to_n 3 optional) (pup_to_n pup_to_2_ceval))
   ((XtimesYinZ_spec 3 recommended) ())
   ((loop_never_stops 3 recommended) (loop_never_stops))
   ((no_whilesR 3 optional) (no_whiles_eqv))
   ((no_whiles_terminating 4 optional) ())
   ((subtract_slowly_spec 4 optional) ())
   ((add_for_loop 4 optional) ())
   ((short_circuit 3 optional) ())
   ((stack_compiler 4 recommended) (s_execute1 s_execute2 s_compile_correct))))
 (ImpCEvalFun
  (((pup_to_n 2 recommended) (pup_to_n))
   ((peven 2 optional) ())
   ((ceval_step__ceval_inf 4 #f) ())
   ((ceval__ceval_step 3 recommended) (ceval__ceval_step))))
 (Equiv
  (((pairs_equiv 2 optional) ())
   ((equiv_classes 3 #f) ())
   ((skip_right 2 #f) (skip_right))
   ((IFB_false 2 recommended) (IFB_false))
   ((swap_if_branches 3 #f) (swap_if_branches))
   ((WHILE_false_informal 2 #f) ())
   ((WHILE_true_nonterm_informal 2 optional) ())
   ((WHILE_true 2 recommended) (WHILE_true))
   ((seq_assoc 2 optional) (seq_assoc identity_assignment_first_try))
   ((assign_aequiv 2 recommended) (assign_aequiv))
   ((functional_extensionality_failed_false 2 optional) ())
   ((CSeq_congruence 3 optional) (CSeq_congruence))
   ((CIf_congruence 3 #f) (CIf_congruence))
   ((fold_bexp_BEq_informal 3 optional) (fold_constants_bexp_sound))
   ((fold_constants_com_sound 3 #f) (fold_constants_com_sound))
   ((optimize_0plus 4 optional) ())
   ((better_subst_equiv 4 optional) ())
   ((inequiv_exercise 3 recommended) (inequiv_exercise))
   ((himp_ceval 2 #f) (havoc_example1 havoc_example2))
   ((havoc_swap 3 #f) (pXY_cequiv_pYX))
   ((havoc_copy 4 #f) (ptwice_cequiv_pcopy))
   ((havoc_diverge 5 optional) (p1_p2_equiv p3_p4_inequiv p5_p6_equiv))
   ((stequiv_refl 1 optional) ())
   ((stequiv_sym 1 optional) ())
   ((stequiv_trans 1 optional) ())
   ((stequiv_update 1 optional) ())
   ((stequiv_aeval 2 optional) ())
   ((stequiv_beval 2 optional) ())
   ((|identity_assignment'| 2 optional) (|identity_assignment'|))
   ((for_while_equiv 4 optional) ())
   ((swap_noninterfering_assignments 3 optional) (swap_noninterfering_assignments))))
 (Hoare
  (((assertions 1 #f) ())
   ((triples 1 #f) ())
   ((valid_triples 1 #f) ())
   ((wp 1 #f) ())
   ((is_wp_formal 3 optional) (is_wp_example))
   ((hoare_asgn_examples 2 #f) ())
   ((hoare_asgn_wrong 2 #f) ())
   ((hoare_asgn_fwd 3 optional) (hoare_asgn_fwd))
   ((hoare_asgn_weakest 2 #f) (hoare_asgn_weakest |hoare_asgn_example1'|))
   ((hoare_asgn_examples_2 2 #f) ())
   ((hoare_asgn_example4 2 #f) (hoare_asgn_example4))
   ((swap_exercise 3 #f) ())
   ((hoarestate1 3 optional) ())
   ((|One-sided conditionals|) ())
   ((if1_hoare 4 recommended) ())
   ((|[REPEAT]|) ())
   ((hoare_repeat 4 #f) (ex1_repeat_works))
   ((|[HAVOC]|) ())
   ((himp_hoare 3 #f) (hoare_havoc))
   ((|Reduce to Zero|) ())
   ((reduce_to_zero_correct 2 #f) (reduce_to_zero_correct))
   ((|Slow Addition|) ())
   ((add_slowly_decoration 3 #f) ())
   ((add_slowly_formal 3 #f) ())
   ((wrong_find_parity_invariant 2 #f) ())
   ((sqrt_informal 3 #f) ())
   ((Factorial) ())
   ((fact_informal 3 optional) ())
   ((fact_formal 4 optional) (fact_com_correct))
   ((slow_assignment_dec 3 optional) (slow_assignment_dec_correct))
   ((factorial_dec 4 optional) ())))
 (Rel
  (((#f 2 optional) ())
   ((#f 2 optional) ())
   ((#f 2 optional) (|lt_trans'|))
   ((#f 2 optional) (|lt_trans''|))
   ((#f 1 optional) (le_S_n))
   ((le_Sn_n_inf 2 optional) ())
   ((#f 1 optional) (le_Sn_n))
   ((#f 2 optional) (le_not_symmetric))
   ((#f 2 optional) (le_antisymmetric))
   ((#f 2 optional) (le_step))
   ((rsc_trans 2 optional) (rsc_trans))
   ((rtc_rsc_coincide 3 optional) (rtc_rsc_coincide))))
 (Smallstep
  (((test_step_2 2 #f) (test_step_2))
   ((redo_determinism 3 recommended) ())
   ((step_deterministic 2 optional) (step_deterministic))
   ((value_not_same_as_normal_form 3 optional) ())
   ((value_not_same_as_normal_form 2 optional) ())
   ((|value_not_same_as_normal_form'| 3 #f) ())
   ((smallstep_bools 1 #f) ())
   ((progress_bool 3 recommended) (strong_progress))
   ((step_deterministic 2 optional) (step_deterministic))
   ((smallstep_bool_shortcut 2 #f) (bool_step_prop4_holds))
   ((properties_of_altered_step 3 optional) ())
   ((test_multistep_2 1 optional) ())
   ((test_multistep_3 1 optional) ())
   ((test_multistep_4 2 #f) ())
   ((normal_forms_unique 3 optional) (normal_forms_unique))
   ((multistep_congr_2 2 #f) ())
   ((eval__multistep 3 #f) (eval__multistep))
   ((eval__multistep_inf 3 #f) ())
   ((step__eval 3 #f) ())
   ((multistep__eval 3 #f) (multistep__eval))
   ((combined_properties 4 #f) ())
   ((#f 3 optional) ())
   ((#f 3 optional) ())))
 (Types
  (((normalize_ex 1 #f) (normalize_ex))
   ((|normalize_ex'| 1 optional) (|normalize_ex'|))
   ((some_term_is_stuck 2 #f) (some_term_is_stuck))
   ((value_is_nf 3 optional) ())
   ((step_deterministic 3 optional) (step_deterministic))
   ((succ_hastype_nat__hastype_nat 1 #f) (succ_hastype_nat__hastype_nat))
   ((finish_progress_informal 3 recommended) ())
   ((finish_progress 3 #f) (progress))
   ((step_review 1 #f) ())
   ((finish_preservation_informal 3 recommended) ())
   ((finish_preservation 2 #f) (preservation))
   ((preservation_alternate_proof 3 #f) (|preservation'|))
   ((subject_expansion 2 recommended) ())
   ((variation1 2 #f) ())
   ((variation2 2 #f) ())
   ((variation3 2 #f) ())
   ((variation4 2 #f) ())
   ((variation5 2 #f) ())
   ((variation6 2 #f) ())
   ((variation7 2 #f) ())
   ((variation8 2 #f) ())
   ((more_variations 3 optional) ())
   ((remove_predzero 1 #f) ())
   ((prog_pres_bigstep 4 optional) ())))
 (Stlc
  (((step_example3 2 #f) ())
   ((typing_example_2_full 2 optional) (typing_example_2_full))
   ((typing_example_3 2 #f) (typing_example_3))
   ((typing_nonexample_3 3 #f) (typing_nonexample_3))
   ((typing_statements 1 optional) ())
   ((more_typing_statements 1 #f) ())
   ((progress_from_term_ind 3 optional) (|progress'|))
   ((typable_empty__closed 2 #f) ())
   ((subject_expansion_stlc 2 recommended) ())
   ((type_soundness 2 optional) ())
   ((types_unique 3 #f) ())
   ((progress_preservation_statement 1 #f) ())
   ((stlc_variation1 2 #f) ())
   ((stlc_variation2 2 #f) ())
   ((stlc_variation3 2 #f) ())
   ((stlc_variation4 2 #f) ())
   ((stlc_variation5 2 #f) ())
   ((stlc_variation6 2 #f) ())
   ((stlc_variation7 2 #f) ())
   ((|STLC with Arithmetic| #f optional) ())
   ((stlc_arith 4 optional) ())))
 (MoreStlc
  (((halve_fix 1 #f) ())
   ((fact_steps 1 recommended) ())
   ((|Formalizing the Extensions|) ())
   ((STLC_extensions 4 recommended) ()))))